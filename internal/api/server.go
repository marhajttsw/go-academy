// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Character defines model for Character.
type Character struct {
	CharacterId *uint64 `json:"characterId,omitempty"`
	Movie       string  `json:"movie" validate:"required"`
	MovieId     uint64  `json:"movieId" validate:"required"`
	Name        string  `json:"name" validate:"required"`
}

// Movie defines model for Movie.
type Movie struct {
	Id   uint64 `json:"id"`
	Name string `json:"name" validate:"required"`
	Year int    `json:"year" validate:"required,min=1888"`
}

// PostCharactersJSONRequestBody defines body for PostCharacters for application/json ContentType.
type PostCharactersJSONRequestBody = Character

// PutCharactersCharacterIdJSONRequestBody defines body for PutCharactersCharacterId for application/json ContentType.
type PutCharactersCharacterIdJSONRequestBody = Character

// PostMoviesJSONRequestBody defines body for PostMovies for application/json ContentType.
type PostMoviesJSONRequestBody = Movie

// PutMoviesMovieIdJSONRequestBody defines body for PutMoviesMovieId for application/json ContentType.
type PutMoviesMovieIdJSONRequestBody = Movie

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List characters
	// (GET /characters)
	GetCharacters(ctx echo.Context) error
	// Create a character
	// (POST /characters)
	PostCharacters(ctx echo.Context) error
	// Delete a character by ID
	// (DELETE /characters/{characterId})
	DeleteCharactersCharacterId(ctx echo.Context, characterId uint64) error
	// Get a character by ID
	// (GET /characters/{characterId})
	GetCharactersCharacterId(ctx echo.Context, characterId uint64) error
	// Replace a character by ID
	// (PUT /characters/{characterId})
	PutCharactersCharacterId(ctx echo.Context, characterId uint64) error
	// Get character certificate
	// (GET /characters/{characterId}/cert)
	GetCharactersCharacterIdCert(ctx echo.Context, characterId uint64) error
	// List movies
	// (GET /movies)
	GetMovies(ctx echo.Context) error
	// Create a movie
	// (POST /movies)
	PostMovies(ctx echo.Context) error
	// Delete a movie by ID
	// (DELETE /movies/{movieId})
	DeleteMoviesMovieId(ctx echo.Context, movieId uint64) error
	// Get a movie by ID
	// (GET /movies/{movieId})
	GetMoviesMovieId(ctx echo.Context, movieId uint64) error
	// Replace a movie by ID
	// (PUT /movies/{movieId})
	PutMoviesMovieId(ctx echo.Context, movieId uint64) error
	// Get movie certificate
	// (GET /movies/{movieId}/cert)
	GetMoviesMovieIdCert(ctx echo.Context, movieId uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) GetCharacters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCharacters(ctx)
	return err
}

// PostCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) PostCharacters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCharacters(ctx)
	return err
}

// DeleteCharactersCharacterId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCharactersCharacterId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "characterId" -------------
	var characterId uint64

	err = runtime.BindStyledParameterWithOptions("simple", "characterId", ctx.Param("characterId"), &characterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter characterId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCharactersCharacterId(ctx, characterId)
	return err
}

// GetCharactersCharacterId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCharactersCharacterId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "characterId" -------------
	var characterId uint64

	err = runtime.BindStyledParameterWithOptions("simple", "characterId", ctx.Param("characterId"), &characterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter characterId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCharactersCharacterId(ctx, characterId)
	return err
}

// PutCharactersCharacterId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCharactersCharacterId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "characterId" -------------
	var characterId uint64

	err = runtime.BindStyledParameterWithOptions("simple", "characterId", ctx.Param("characterId"), &characterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter characterId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCharactersCharacterId(ctx, characterId)
	return err
}

// GetCharactersCharacterIdCert converts echo context to params.
func (w *ServerInterfaceWrapper) GetCharactersCharacterIdCert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "characterId" -------------
	var characterId uint64

	err = runtime.BindStyledParameterWithOptions("simple", "characterId", ctx.Param("characterId"), &characterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter characterId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCharactersCharacterIdCert(ctx, characterId)
	return err
}

// GetMovies converts echo context to params.
func (w *ServerInterfaceWrapper) GetMovies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMovies(ctx)
	return err
}

// PostMovies converts echo context to params.
func (w *ServerInterfaceWrapper) PostMovies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMovies(ctx)
	return err
}

// DeleteMoviesMovieId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMoviesMovieId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movieId" -------------
	var movieId uint64

	err = runtime.BindStyledParameterWithOptions("simple", "movieId", ctx.Param("movieId"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movieId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMoviesMovieId(ctx, movieId)
	return err
}

// GetMoviesMovieId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMoviesMovieId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movieId" -------------
	var movieId uint64

	err = runtime.BindStyledParameterWithOptions("simple", "movieId", ctx.Param("movieId"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movieId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMoviesMovieId(ctx, movieId)
	return err
}

// PutMoviesMovieId converts echo context to params.
func (w *ServerInterfaceWrapper) PutMoviesMovieId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movieId" -------------
	var movieId uint64

	err = runtime.BindStyledParameterWithOptions("simple", "movieId", ctx.Param("movieId"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movieId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutMoviesMovieId(ctx, movieId)
	return err
}

// GetMoviesMovieIdCert converts echo context to params.
func (w *ServerInterfaceWrapper) GetMoviesMovieIdCert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movieId" -------------
	var movieId uint64

	err = runtime.BindStyledParameterWithOptions("simple", "movieId", ctx.Param("movieId"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movieId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMoviesMovieIdCert(ctx, movieId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/characters", wrapper.GetCharacters)
	router.POST(baseURL+"/characters", wrapper.PostCharacters)
	router.DELETE(baseURL+"/characters/:characterId", wrapper.DeleteCharactersCharacterId)
	router.GET(baseURL+"/characters/:characterId", wrapper.GetCharactersCharacterId)
	router.PUT(baseURL+"/characters/:characterId", wrapper.PutCharactersCharacterId)
	router.GET(baseURL+"/characters/:characterId/cert", wrapper.GetCharactersCharacterIdCert)
	router.GET(baseURL+"/movies", wrapper.GetMovies)
	router.POST(baseURL+"/movies", wrapper.PostMovies)
	router.DELETE(baseURL+"/movies/:movieId", wrapper.DeleteMoviesMovieId)
	router.GET(baseURL+"/movies/:movieId", wrapper.GetMoviesMovieId)
	router.PUT(baseURL+"/movies/:movieId", wrapper.PutMoviesMovieId)
	router.GET(baseURL+"/movies/:movieId/cert", wrapper.GetMoviesMovieIdCert)

}

type GetCharactersRequestObject struct {
}

type GetCharactersResponseObject interface {
	VisitGetCharactersResponse(w http.ResponseWriter) error
}

type GetCharacters200JSONResponse []Character

func (response GetCharacters200JSONResponse) VisitGetCharactersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCharactersRequestObject struct {
	Body *PostCharactersJSONRequestBody
}

type PostCharactersResponseObject interface {
	VisitPostCharactersResponse(w http.ResponseWriter) error
}

type PostCharacters201JSONResponse Character

func (response PostCharacters201JSONResponse) VisitPostCharactersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostCharacters400Response struct {
}

func (response PostCharacters400Response) VisitPostCharactersResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteCharactersCharacterIdRequestObject struct {
	CharacterId uint64 `json:"characterId"`
}

type DeleteCharactersCharacterIdResponseObject interface {
	VisitDeleteCharactersCharacterIdResponse(w http.ResponseWriter) error
}

type DeleteCharactersCharacterId204Response struct {
}

func (response DeleteCharactersCharacterId204Response) VisitDeleteCharactersCharacterIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCharactersCharacterId404Response struct {
}

func (response DeleteCharactersCharacterId404Response) VisitDeleteCharactersCharacterIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetCharactersCharacterIdRequestObject struct {
	CharacterId uint64 `json:"characterId"`
}

type GetCharactersCharacterIdResponseObject interface {
	VisitGetCharactersCharacterIdResponse(w http.ResponseWriter) error
}

type GetCharactersCharacterId200JSONResponse Character

func (response GetCharactersCharacterId200JSONResponse) VisitGetCharactersCharacterIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCharactersCharacterId404Response struct {
}

func (response GetCharactersCharacterId404Response) VisitGetCharactersCharacterIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutCharactersCharacterIdRequestObject struct {
	CharacterId uint64 `json:"characterId"`
	Body        *PutCharactersCharacterIdJSONRequestBody
}

type PutCharactersCharacterIdResponseObject interface {
	VisitPutCharactersCharacterIdResponse(w http.ResponseWriter) error
}

type PutCharactersCharacterId200JSONResponse Character

func (response PutCharactersCharacterId200JSONResponse) VisitPutCharactersCharacterIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCharactersCharacterId400Response struct {
}

func (response PutCharactersCharacterId400Response) VisitPutCharactersCharacterIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutCharactersCharacterId404Response struct {
}

func (response PutCharactersCharacterId404Response) VisitPutCharactersCharacterIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetCharactersCharacterIdCertRequestObject struct {
	CharacterId uint64 `json:"characterId"`
}

type GetCharactersCharacterIdCertResponseObject interface {
	VisitGetCharactersCharacterIdCertResponse(w http.ResponseWriter) error
}

type GetCharactersCharacterIdCert200TextResponse string

func (response GetCharactersCharacterIdCert200TextResponse) VisitGetCharactersCharacterIdCertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type GetCharactersCharacterIdCert404Response struct {
}

func (response GetCharactersCharacterIdCert404Response) VisitGetCharactersCharacterIdCertResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetMoviesRequestObject struct {
}

type GetMoviesResponseObject interface {
	VisitGetMoviesResponse(w http.ResponseWriter) error
}

type GetMovies200JSONResponse []Movie

func (response GetMovies200JSONResponse) VisitGetMoviesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostMoviesRequestObject struct {
	Body *PostMoviesJSONRequestBody
}

type PostMoviesResponseObject interface {
	VisitPostMoviesResponse(w http.ResponseWriter) error
}

type PostMovies201JSONResponse Movie

func (response PostMovies201JSONResponse) VisitPostMoviesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostMovies400Response struct {
}

func (response PostMovies400Response) VisitPostMoviesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteMoviesMovieIdRequestObject struct {
	MovieId uint64 `json:"movieId"`
}

type DeleteMoviesMovieIdResponseObject interface {
	VisitDeleteMoviesMovieIdResponse(w http.ResponseWriter) error
}

type DeleteMoviesMovieId204Response struct {
}

func (response DeleteMoviesMovieId204Response) VisitDeleteMoviesMovieIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMoviesMovieId404Response struct {
}

func (response DeleteMoviesMovieId404Response) VisitDeleteMoviesMovieIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetMoviesMovieIdRequestObject struct {
	MovieId uint64 `json:"movieId"`
}

type GetMoviesMovieIdResponseObject interface {
	VisitGetMoviesMovieIdResponse(w http.ResponseWriter) error
}

type GetMoviesMovieId200JSONResponse Movie

func (response GetMoviesMovieId200JSONResponse) VisitGetMoviesMovieIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMoviesMovieId404Response struct {
}

func (response GetMoviesMovieId404Response) VisitGetMoviesMovieIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutMoviesMovieIdRequestObject struct {
	MovieId uint64 `json:"movieId"`
	Body    *PutMoviesMovieIdJSONRequestBody
}

type PutMoviesMovieIdResponseObject interface {
	VisitPutMoviesMovieIdResponse(w http.ResponseWriter) error
}

type PutMoviesMovieId200JSONResponse Movie

func (response PutMoviesMovieId200JSONResponse) VisitPutMoviesMovieIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutMoviesMovieId400Response struct {
}

func (response PutMoviesMovieId400Response) VisitPutMoviesMovieIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutMoviesMovieId404Response struct {
}

func (response PutMoviesMovieId404Response) VisitPutMoviesMovieIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetMoviesMovieIdCertRequestObject struct {
	MovieId uint64 `json:"movieId"`
}

type GetMoviesMovieIdCertResponseObject interface {
	VisitGetMoviesMovieIdCertResponse(w http.ResponseWriter) error
}

type GetMoviesMovieIdCert200TextResponse string

func (response GetMoviesMovieIdCert200TextResponse) VisitGetMoviesMovieIdCertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type GetMoviesMovieIdCert404Response struct {
}

func (response GetMoviesMovieIdCert404Response) VisitGetMoviesMovieIdCertResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List characters
	// (GET /characters)
	GetCharacters(ctx context.Context, request GetCharactersRequestObject) (GetCharactersResponseObject, error)
	// Create a character
	// (POST /characters)
	PostCharacters(ctx context.Context, request PostCharactersRequestObject) (PostCharactersResponseObject, error)
	// Delete a character by ID
	// (DELETE /characters/{characterId})
	DeleteCharactersCharacterId(ctx context.Context, request DeleteCharactersCharacterIdRequestObject) (DeleteCharactersCharacterIdResponseObject, error)
	// Get a character by ID
	// (GET /characters/{characterId})
	GetCharactersCharacterId(ctx context.Context, request GetCharactersCharacterIdRequestObject) (GetCharactersCharacterIdResponseObject, error)
	// Replace a character by ID
	// (PUT /characters/{characterId})
	PutCharactersCharacterId(ctx context.Context, request PutCharactersCharacterIdRequestObject) (PutCharactersCharacterIdResponseObject, error)
	// Get character certificate
	// (GET /characters/{characterId}/cert)
	GetCharactersCharacterIdCert(ctx context.Context, request GetCharactersCharacterIdCertRequestObject) (GetCharactersCharacterIdCertResponseObject, error)
	// List movies
	// (GET /movies)
	GetMovies(ctx context.Context, request GetMoviesRequestObject) (GetMoviesResponseObject, error)
	// Create a movie
	// (POST /movies)
	PostMovies(ctx context.Context, request PostMoviesRequestObject) (PostMoviesResponseObject, error)
	// Delete a movie by ID
	// (DELETE /movies/{movieId})
	DeleteMoviesMovieId(ctx context.Context, request DeleteMoviesMovieIdRequestObject) (DeleteMoviesMovieIdResponseObject, error)
	// Get a movie by ID
	// (GET /movies/{movieId})
	GetMoviesMovieId(ctx context.Context, request GetMoviesMovieIdRequestObject) (GetMoviesMovieIdResponseObject, error)
	// Replace a movie by ID
	// (PUT /movies/{movieId})
	PutMoviesMovieId(ctx context.Context, request PutMoviesMovieIdRequestObject) (PutMoviesMovieIdResponseObject, error)
	// Get movie certificate
	// (GET /movies/{movieId}/cert)
	GetMoviesMovieIdCert(ctx context.Context, request GetMoviesMovieIdCertRequestObject) (GetMoviesMovieIdCertResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCharacters operation middleware
func (sh *strictHandler) GetCharacters(ctx echo.Context) error {
	var request GetCharactersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCharacters(ctx.Request().Context(), request.(GetCharactersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCharacters")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCharactersResponseObject); ok {
		return validResponse.VisitGetCharactersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCharacters operation middleware
func (sh *strictHandler) PostCharacters(ctx echo.Context) error {
	var request PostCharactersRequestObject

	var body PostCharactersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCharacters(ctx.Request().Context(), request.(PostCharactersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCharacters")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCharactersResponseObject); ok {
		return validResponse.VisitPostCharactersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCharactersCharacterId operation middleware
func (sh *strictHandler) DeleteCharactersCharacterId(ctx echo.Context, characterId uint64) error {
	var request DeleteCharactersCharacterIdRequestObject

	request.CharacterId = characterId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCharactersCharacterId(ctx.Request().Context(), request.(DeleteCharactersCharacterIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCharactersCharacterId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCharactersCharacterIdResponseObject); ok {
		return validResponse.VisitDeleteCharactersCharacterIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCharactersCharacterId operation middleware
func (sh *strictHandler) GetCharactersCharacterId(ctx echo.Context, characterId uint64) error {
	var request GetCharactersCharacterIdRequestObject

	request.CharacterId = characterId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCharactersCharacterId(ctx.Request().Context(), request.(GetCharactersCharacterIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCharactersCharacterId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCharactersCharacterIdResponseObject); ok {
		return validResponse.VisitGetCharactersCharacterIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutCharactersCharacterId operation middleware
func (sh *strictHandler) PutCharactersCharacterId(ctx echo.Context, characterId uint64) error {
	var request PutCharactersCharacterIdRequestObject

	request.CharacterId = characterId

	var body PutCharactersCharacterIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCharactersCharacterId(ctx.Request().Context(), request.(PutCharactersCharacterIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCharactersCharacterId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutCharactersCharacterIdResponseObject); ok {
		return validResponse.VisitPutCharactersCharacterIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCharactersCharacterIdCert operation middleware
func (sh *strictHandler) GetCharactersCharacterIdCert(ctx echo.Context, characterId uint64) error {
	var request GetCharactersCharacterIdCertRequestObject

	request.CharacterId = characterId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCharactersCharacterIdCert(ctx.Request().Context(), request.(GetCharactersCharacterIdCertRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCharactersCharacterIdCert")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCharactersCharacterIdCertResponseObject); ok {
		return validResponse.VisitGetCharactersCharacterIdCertResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMovies operation middleware
func (sh *strictHandler) GetMovies(ctx echo.Context) error {
	var request GetMoviesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMovies(ctx.Request().Context(), request.(GetMoviesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMovies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMoviesResponseObject); ok {
		return validResponse.VisitGetMoviesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostMovies operation middleware
func (sh *strictHandler) PostMovies(ctx echo.Context) error {
	var request PostMoviesRequestObject

	var body PostMoviesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostMovies(ctx.Request().Context(), request.(PostMoviesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMovies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostMoviesResponseObject); ok {
		return validResponse.VisitPostMoviesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteMoviesMovieId operation middleware
func (sh *strictHandler) DeleteMoviesMovieId(ctx echo.Context, movieId uint64) error {
	var request DeleteMoviesMovieIdRequestObject

	request.MovieId = movieId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMoviesMovieId(ctx.Request().Context(), request.(DeleteMoviesMovieIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMoviesMovieId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteMoviesMovieIdResponseObject); ok {
		return validResponse.VisitDeleteMoviesMovieIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMoviesMovieId operation middleware
func (sh *strictHandler) GetMoviesMovieId(ctx echo.Context, movieId uint64) error {
	var request GetMoviesMovieIdRequestObject

	request.MovieId = movieId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMoviesMovieId(ctx.Request().Context(), request.(GetMoviesMovieIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMoviesMovieId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMoviesMovieIdResponseObject); ok {
		return validResponse.VisitGetMoviesMovieIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutMoviesMovieId operation middleware
func (sh *strictHandler) PutMoviesMovieId(ctx echo.Context, movieId uint64) error {
	var request PutMoviesMovieIdRequestObject

	request.MovieId = movieId

	var body PutMoviesMovieIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutMoviesMovieId(ctx.Request().Context(), request.(PutMoviesMovieIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutMoviesMovieId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutMoviesMovieIdResponseObject); ok {
		return validResponse.VisitPutMoviesMovieIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMoviesMovieIdCert operation middleware
func (sh *strictHandler) GetMoviesMovieIdCert(ctx echo.Context, movieId uint64) error {
	var request GetMoviesMovieIdCertRequestObject

	request.MovieId = movieId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMoviesMovieIdCert(ctx.Request().Context(), request.(GetMoviesMovieIdCertRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMoviesMovieIdCert")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMoviesMovieIdCertResponseObject); ok {
		return validResponse.VisitGetMoviesMovieIdCertResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
